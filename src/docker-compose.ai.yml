version: '3.8'

services:
  # Laravel Backend (existing)
  laravel:
    build:
      context: ./php
      dockerfile: Dockerfile
    container_name: noteur_backend
    volumes:
      - ./src:/var/www/html
    environment:
      - DB_HOST=mysql
      - REDIS_HOST=redis
      - AI_MICROSERVICE_URL=http://ai-service:8000
    depends_on:
      - mysql
      - redis
    networks:
      - noteur-network

  # AI Microservice
  ai-service:
    build:
      context: ./ai-microservice
      dockerfile: Dockerfile
    container_name: noteur_ai_service
    ports:
      - "8001:8000"
    environment:
      - DATABASE_URL=mysql://root:password@mysql:3306/GoalManagementSystem
      - REDIS_URL=redis://redis:6379
      - ML_MODEL_PATH=/app/ml_models/trained_models
      - LOG_LEVEL=INFO
    volumes:
      - ./ai-microservice:/app
      - ai_models:/app/ml_models/trained_models
    depends_on:
      - mysql
      - redis
      - ml-trainer
    networks:
      - noteur-network

  # ML Model Training Service (background)
  ml-trainer:
    build:
      context: ./ai-microservice
      dockerfile: Dockerfile.trainer
    container_name: noteur_ml_trainer
    environment:
      - DATABASE_URL=mysql://root:password@mysql:3306/GoalManagementSystem
      - TRAINING_SCHEDULE=0 2 * * * # Daily at 2 AM
    volumes:
      - ai_models:/app/ml_models/trained_models
      - training_data:/app/training_data
    depends_on:
      - mysql
    networks:
      - noteur-network

  # Redis for caching AI results
  redis:
    image: redis:7-alpine
    container_name: noteur_redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - noteur-network

  # MySQL (existing)
  mysql:
    image: mysql:8.0
    container_name: noteur_mysql
    environment:
      MYSQL_ROOT_PASSWORD: password
      MYSQL_DATABASE: GoalManagementSystem
    ports:
      - "3306:3306"
    volumes:
      - mysql_data:/var/lib/mysql
      - ./src/GoalManagementSystem.sql:/docker-entrypoint-initdb.d/01-init.sql
      - ./src/ai_data_structure.sql:/docker-entrypoint-initdb.d/02-ai-tables.sql
    networks:
      - noteur-network

  # Nginx (existing)
  nginx:
    image: nginx:alpine
    container_name: noteur_nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/conf.d:/etc/nginx/conf.d
      - ./src:/var/www/html
    depends_on:
      - laravel
    networks:
      - noteur-network

  # Jupyter for data analysis & model development
  jupyter:
    image: jupyter/datascience-notebook:latest
    container_name: noteur_jupyter
    ports:
      - "8888:8888"
    environment:
      - JUPYTER_ENABLE_LAB=yes
    volumes:
      - ./ai-microservice/notebooks:/home/jovyan/work
      - training_data:/home/jovyan/data
    networks:
      - noteur-network

  # MLflow for model tracking
  mlflow:
    image: python:3.9-slim
    container_name: noteur_mlflow
    ports:
      - "5000:5000"
    command: >
      bash -c "pip install mlflow pymysql &&
               mlflow server 
               --backend-store-uri mysql://root:password@mysql:3306/mlflow
               --default-artifact-root file:///mlflow/artifacts
               --host 0.0.0.0"
    volumes:
      - mlflow_artifacts:/mlflow/artifacts
    depends_on:
      - mysql
    networks:
      - noteur-network

volumes:
  mysql_data:
  redis_data:
  ai_models:
  training_data:
  mlflow_artifacts:

networks:
  noteur-network:
    driver: bridge 